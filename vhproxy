#!/usr/bin/perl
use lib './lib';
use FindBin '$Bin';
use Mojolicious::Lite;
use Mojo::UserAgent;
use VHProxy::IO qw($output);
use VHProxy::Handlers::HTTP;
use VHProxy::Config;


my $VERSION = "0.2";
my $Hosts;
my $ListenPort = '8080';
my $Scheme ="http"; #Default
my $Domain ='*';
my @ConfigDirs =
    ( $ENV{'HOME'} . "/.vhproxy", $Bin . "/config", "/etc/vhproxy" );

$output->print_ascii("VHProxy::IO::DATA","magenta on_black bold");

$output->print( "VHProxy version $VERSION started", "~~" );
$output->print( "Importing hosts, please wait, searching for config in : "
        . join( " ", @ConfigDirs ) );
my $Config=VHProxy::Config->new(Dirs=> \@ConfigDirs);
$Config->read();

app->config(hypnotoad => {listen => [$Scheme.'://'.$Domain.':'.$ListenPort]});

my $HTTPHandler=VHProxy::Handlers::HTTP->new(
			Hosts => $Config->Hosts(), 
            Scheme=> $Scheme
            );
#I haven't tryed yet, but i think its supports ssl too, because it's based on Mojo::Transaction::HTTP that supports that schema
#maybe will work out of the box? :)


$output->print(
    "\t\t\t\t\t\ta total of " . scalar( keys( %{$Config->Hosts()} ) ) . " hosts were found" );

if ( scalar( keys( %{$Config->Hosts()} ) ) <= 0 ) {
    $output->ERROR("No hosts found");
    exit 1;
    app->exit;
}

any '*' => sub { my $self = shift; $HTTPHandler->proxy($self) };
any '/' => sub { my $self = shift; $HTTPHandler->proxy($self) };



app->start;

